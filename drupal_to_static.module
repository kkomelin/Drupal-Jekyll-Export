<?php
/**
 * @file
 * The main module file.
 *
 * @author Lukas White <hello@lukaswhite.com>
 * Modified by Konstantin Komelin
 */

/**
 * Implements hook_menu().
 */
function drupal_to_static_menu()
{
  $items = array();

  $items['admin/config/development/drupal_to_static'] = array(
    'title' => 'Drupal to Static',
    'description' => 'Export site content to the format suitable for static site generators.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupal_to_static_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM
  );

  return $items;
}

/**
 * Form definition for the drupal_to_static form.
 *
 * Collects parameters for the export.
 */
function drupal_to_static_form($form, &$form_state) {

  $nodes = node_type_get_names();

  $form['types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Types'),
    '#default_value' => array(),
    '#options' => $nodes,
    '#description' => t('Select which content types to export.'),
  );

  $form['layout'] = array(
    '#type' => 'textfield',
    '#title' => t('Layout name'),
    '#required' => TRUE,
    '#default_value' => 'post',
  );

  $form['section'] = array(
    '#type' => 'textfield',
    '#title' => t('Section'),
    '#required' => FALSE,
    '#default_value' => 'contents',
    '#description' => t('The target section in the layout template (Jigsaw only).'),
  );

  $form['markdownify'] = array(
    '#type' => 'checkbox',
    '#title' => t('Convert node content to Markdown'),
    '#default_value' => TRUE,
  );

  $form['date_in_filename'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include node creation date into the resulting file name'),
    '#description' => t('Example !date!-node-alias.md', ['!date!' => date('Y-m-d')]),
    '#default_value' => TRUE,
  );

  $default_language = language_default('native');
  $form['no_language_field_for_default_lang'] = array(
    '#type' => 'checkbox',
    '#title' => t('Do not add language field to nodes in the default language (!lang)', array('!lang' => $default_language)),
    '#description' => t('Ignore it if you do not have multiple languages on your site.'),
    '#default_value' => FALSE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Run Export'),
  );

  return $form;
}

/**
 * Validate function for the drupal_to_static form.
 */
function drupal_to_static_form_validate($form, &$form_state) {

  $types = array_filter($form_state['values']['types']);
  if (!$types) {
    form_set_error('types', t('You must select at least one content type.'));
  }
}

/**
 * Submit function for the drupal_to_static form.
 */
function drupal_to_static_form_submit($form, &$form_state) {

  $types = array_filter($form_state['values']['types']);
  $layout = $form_state['values']['layout'];
  $section = $form_state['values']['section'];
  $markdownify = (bool)$form_state['values']['markdownify'];
  $date_in_filename = (bool)$form_state['values']['date_in_filename'];
  $no_language_field_for_default_lang =
    (bool)$form_state['values']['no_language_field_for_default_lang'];

  drupal_to_static_do_export(
    $types,
    $layout,
    $section,
    $markdownify,
    $date_in_filename,
    $no_language_field_for_default_lang
  );
}

/**
 * Run the export.
 *
 * Converts the content of the specified types to markdown, and creates a zip containing them.
 *
 * @param $types
 * @param $layout
 * @param $section
 *   [Jigsaw only] Section name in the layout template.
 * @param bool $markdownify
 *   Determines whether node content should be converted to Markdown.
 * @param bool $date_in_filename
 *   Indicates whether it's necessary to include the node creation date into the resulting file name.
 * @param bool $no_language_field_for_default_lang
 *   If true, we do not add language field for nodes in the default language.
 */
function drupal_to_static_do_export($types, $layout, $section, $markdownify, $date_in_filename, $no_language_field_for_default_lang)
{
  // Create a temp folder.
  $directory = 'temporary://drupal_to_static';
  $success = file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);

  // Now create a directory for this export, using the current timestamp
  $directory .= DIRECTORY_SEPARATOR . date('YmdHis');
  $success = file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);

  if ($markdownify) {

    // @todo: Check the path to the required Markdownfiy library.
    $path = libraries_get_path('markdownify');

    // Load the Markdownify library
    libraries_load('markdownify');

    $keephtml = true;
    $md = new Markdownify('Foo', MDFY_BODYWIDTH, $keephtml);
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $types)
    ->propertyCondition('status', NODE_PUBLISHED);

  $query->propertyOrderBy('created', 'ASC');

  $entities = $query->execute();

  if (count($entities) > 0) {
    $nids = array_keys($entities['node']);
    $nodes = node_load_multiple($nids);
  }

  $node_authors = drupal_to_static_node_authors($nodes);

  $default_language = language_default('language');

  $archive_filename = 'export_' . REQUEST_TIME . '.zip';
  $archive_uri = 'temporary://' . $archive_filename;
  $zip = new ZipArchive;
  if ($zip->open(drupal_realpath($archive_uri), ZipArchive::CREATE) === TRUE) {

    foreach ($nodes as $node) {

      $filename = drupal_to_static_markdown_filename($node, $date_in_filename);

      // Extract the body
      $fields = field_get_items('node', $node, 'body');
      $body = $fields[0]['value'];
      $format_id = $fields[0]['format'];

      $body = check_markup($body, $format_id, $node->language);

      if ($markdownify) {
        // Now get the markdown.
        $body = $md->parseString($body);
      }

      $meta_fields = array(
        'layout' => $layout, // For Jekyll.
        'extends' => $layout, // For Jigsaw.
      );

      if (!empty($section)) {
        $meta_fields['section'] = $section; // For Jigsaw.
      }

      $meta_fields['nid'] = $node->nid;

      // Export node author name if possible.
      if (isset($node_authors[$node->uid])) {
        $meta_fields['author'] = '"' . drupal_to_static_encode_html($node_authors[$node->uid]) . '"';
      }

      $meta_fields['title'] = '"' . drupal_to_static_encode_html($node->title) . '"';
      $meta_fields['date'] = date('Y-m-d H:i:s', $node->created);

      // Take into account node language if set.
      if (isset($node->language) && $node->language !== LANGUAGE_NONE) {

        if (!$no_language_field_for_default_lang || $node->language !== $default_language) {
          $meta_fields['lang'] = $node->language;
        }
      }

      // Export meta description from Metatags module if it's set.
      if (function_exists('metatag_metatags_load')) {
        $metatags = metatag_metatags_load('node', $node->nid);
        if (
          !empty($metatags) &&
          isset(
            $node->language,
            $metatags[$node->language],
            $metatags[$node->language]['description'],
            $metatags[$node->language]['description']['value']
          )
        ) {
          $meta_fields['meta'] = array(
            'name' => 'description',
            'content' => '"' . drupal_to_static_encode_html($metatags[$node->language]['description']['value']) . '"',
          );
        }
      }

      $yaml = drupal_to_static_document_header($meta_fields);

      // contents of the file are the YAML followed by the Markdown.
      $contents = $yaml . $body;

      $full_path = $directory . DIRECTORY_SEPARATOR . $filename;

      // and create the file
      file_unmanaged_save_data($contents, $full_path);

      // ...and add it to the zip file
      $zip->addFile(drupal_realpath($full_path), $filename);
    }

    $zip->close();

    // Most of this is only necessary because of IE
    header("Cache-Control: public");
    header("Content-Type: application/octet-stream");
    header("Cache-Control: no-store, no-cache, must-revalidate");
    header("Cache-Control: post-check=0, pre-check=0");
    header("Content-Disposition: attachment; filename=\"$archive_filename\";" );
    header("Content-Transfer-Encoding: binary");

    $fp = fopen(drupal_realpath($archive_uri), 'rb');
    fpassthru($fp);
    drupal_exit();
  }

  drupal_set_message('Content Exported');
}

/**
 * Get author names for the given nodes.
 *
 * @param array $nodes
 * @return array
 *  [uid => name]
 */
function drupal_to_static_node_authors($nodes) {
  if (empty($nodes)) {
    return array();
  }

  $uids = array();
  foreach ($nodes as $node) {
    $uids[] = $node->uid;
  }

  $query = db_select('users', 'u');
  $query->condition('uid', $uids, 'IN');
  $query->fields('u', array('uid', 'name'));
  return $query->execute()
    ->fetchAllKeyed();
}

/**
 * Generate document meta header.
 *
 * @param array $fields
 *   [key => value]
 * @return string
 */
function drupal_to_static_document_header($fields) {
  $content = "---\n";

  foreach ($fields as $key => $value) {
    // @todo: Ideally, it should be serialized from an array to YAML for example via Symfony YAML component.
    if ($key === 'meta') {
      $content .= $key . ":\n";
      $content .= '  - name: ' . $value['name'] . "\n";
      $content .= '    content: ' . $value['content'] . "\n";
      continue;
    }

    $content .= $key . ': ' . $value . "\n";
  }

  $content .= "---\n\n";

  return $content;
}

/**
 * Get Markdown file name.
 *
 * @param object $node
 * @param bool $date_in_filename
 *
 * @return string
 */
function drupal_to_static_markdown_filename($node, $date_in_filename) {
  // Get the path alias
  $path_alias = drupal_get_path_alias('node/' . $node->nid, $node->language);

  // ..get the part after the last /, if appropriate
  $last_slash_pos = strrpos($path_alias, '/');
  if ($last_slash_pos !== FALSE) {
    $alias = substr($path_alias, $last_slash_pos + 1);
  } else {
    $alias = $path_alias;
  }

  // Build the filename.
  $filename = $alias . '.md';
  if ($date_in_filename) {
    $filename = date('Y-m-d', $node->created) . '-' . $filename;
  }

  return $filename;
}

/**
 * Escape double quotes in the given string.
 *
 * @param string $subject
 *
 * @return string
 */
function drupal_to_static_encode_html($subject) {
  return htmlentities($subject, ENT_QUOTES);
}
