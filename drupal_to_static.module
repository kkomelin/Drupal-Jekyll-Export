<?php
/**
 * @file
 * The main module file.
 *
 * @author Lukas White <hello@lukaswhite.com>
 */

/**
 * Implements hook_menu().
 */
function drupal_to_static_menu()
{
  $items = array();

  $items['admin/config/development/drupal_to_static'] = array(
    'title' => 'Drupal to Static',
    'description' => 'Export site content to the format suitable for static site generators.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupal_to_static_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM
  );

  return $items;
}

/**
 * Form definition for the drupal_to_static form.
 *
 * Collects parameters for the export.
 */
function drupal_to_static_form($form, &$form_state) {

  $nodes = node_type_get_names();

  $form['types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Types'),
    '#default_value' => array(),
    '#options' => $nodes,
    '#description' => t('Select which content types to export.'),
  );

  $form['layout'] = array(
    '#type' => 'textfield',
    '#title' => t('Layout name'),
    '#required' => TRUE,
    '#default_value' => 'post',
  );

  $form['markdownify'] = array(
    '#type' => 'checkbox',
    '#title' => t('Convert node content to Markdown?'),
    '#default_value' => FALSE,
  );

  $form['date_in_filename'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include node creation date into the resulting file name?'),
    '#description' => t('If enabled, the file names will be like !date!-node-alias', ['!date!' => date('Y-m-d')]),
    '#default_value' => FALSE,
  );

  $form['multilingualism'] = array(
    '#type' => 'checkbox',
    '#title' => t('Take language into account?'),
    '#description' => t('If enabled, the paths will be like /es/node-alias/ and the resulting files will have a language field'),
    '#default_value' => FALSE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Run Export'),
  );

  return $form;
}

/**
 * Validate function for the drupal_to_static form.
 */
function drupal_to_static_form_validate($form, &$form_state) {

  $types = array_filter($form_state['values']['types']);
  if (!$types) {
    form_set_error('types', t('You must select at least one content type.'));
  }
}

/**
 * Submit function for the drupal_to_static form.
 */
function drupal_to_static_form_submit($form, &$form_state) {

  $types = array_filter($form_state['values']['types']);
  $layout = $form_state['values']['layout'];
  $markdownify = (bool)$form_state['values']['markdownify'];
  $date_in_filename = (bool)$form_state['values']['date_in_filename'];
  $multilingualism = (bool)$form_state['values']['multilingualism'];
  drupal_to_static_do_export($types, $layout, $markdownify, $date_in_filename, $multilingualism);
}

/**
 * Run the export.
 *
 * Converts the content of the specified types to markdown, and creates a zip containing them.
 *
 * @param $types
 * @param $layout
 * @param bool $markdownify
 *   Determines whether node content should be converted to Markdown.
 * @param bool $date_in_filename
 *   Indicates whether it's necessary to include the node creation date into the resulting file name.
 * @param bool $multilingualism
 *   Indicates whether it's necessary to take into account node language.
 *
 */
function drupal_to_static_do_export($types, $layout, $markdownify, $date_in_filename, $multilingualism)
{
  // Create a temp folder.
  $directory = 'temporary://drupal_to_static';
  $success = file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);

  // Now create a directory for this export, using the current timestamp
  $directory .= DIRECTORY_SEPARATOR . date('YmdHis');
  $success = file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);

  if ($markdownify) {

    // @todo: Check the path to the required Markdownfiy library.
    $path = libraries_get_path('markdownify');

    // Load the Markdownify library
    libraries_load('markdownify');

    $keephtml = true;
    $md = new Markdownify('Foo', MDFY_BODYWIDTH, $keephtml);
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $types)
    ->propertyCondition('status', NODE_PUBLISHED);

  $query->propertyOrderBy('created', 'ASC');

  $entities = $query->execute();

  if (count($entities) > 0) {
    $nids = array_keys($entities['node']);
    $nodes = node_load_multiple($nids);
  }

  $archive_filename = 'export_' . REQUEST_TIME . '.zip';
  $archive_uri = 'temporary://' . $archive_filename;
  $zip = new ZipArchive;
  if ($zip->open(drupal_realpath($archive_uri), ZipArchive::CREATE) === TRUE) {

    foreach ($nodes as $node) {

      // Extract the body
      $fields = field_get_items('node', $node, 'body');
      $body = $fields[0]['value'];

      // Get the path alias
      $path_alias = drupal_get_path_alias('node/' . $node->nid, $node->language);

      // ..get the part after the last /, if appropriate
      if (strpos($path_alias, '/')) {
        $alias = substr($path_alias, (strripos($path_alias, '/') + 1));
      } else {
        $alias = $path_alias;
      }

      // Build the filename.
      $filename = $alias . '.md';
      if ($date_in_filename) {
        $filename = date('Y-m-d', $node->created) . '-' . $filename;
      }

      if ($markdownify) {
        // Now get the markdown.
        $body = $md->parseString($body);
      }

      // Generate the YAML
      $yaml = sprintf("---\nlayout: %s\ntitle: \"%s\"\ndate: %s\n---\n\n",
        $layout, $node->title, date('Y-m-d H:i:s', $node->created));

      // Take into account node language if set.
      if ($multilingualism && isset($node->language) && $node->language !== LANGUAGE_NONE) {
        $filename = $node->language . DIRECTORY_SEPARATOR . $filename;

        $language_dir = $directory . DIRECTORY_SEPARATOR . $node->language;
        // @todo: Call file_prepare_directory() only once for each language.
        $success = file_prepare_directory($language_dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);

        $yaml = sprintf("---\nlayout: %s\ntitle: \"%s\"\ndate: %s\nlanguage: %s\n---\n\n",
          $layout, $node->title, date('Y-m-d H:i:s', $node->created), $node->language);
      }

      // contents of the file are the YAML followed by the Markdown.
      $contents = $yaml . $body;

      $full_path = $directory . DIRECTORY_SEPARATOR . $filename;

      // and create the file
      file_unmanaged_save_data($contents, $full_path);

      // ...and add it to the zip file
      $zip->addFile(drupal_realpath($full_path), $filename);
    }

    $zip->close();

    // Most of this is only necessary because of IE
    header("Cache-Control: public");
    header("Content-Type: application/octet-stream");
    header("Cache-Control: no-store, no-cache, must-revalidate");
    header("Cache-Control: post-check=0, pre-check=0");
    header("Content-Disposition: attachment; filename=\"$archive_filename\";" );
    header("Content-Transfer-Encoding: binary");

    $fp = fopen(drupal_realpath($archive_uri), 'rb');
    fpassthru($fp);
    drupal_exit();
  }

  drupal_set_message('Content Exported');
}
